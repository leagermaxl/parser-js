import ExcelJS from 'exceljs';
import fs from 'fs';
import path from 'path';

// async function createFolder() {
const date = new Date();
const folderName = `${String(date.getDate()).padStart(2, '0')}-${String(
  date.getMonth() + 1,
).padStart(2, '0')}-${date.getFullYear()}`;

const folderPath = path.join(process.cwd(), folderName);

// }

// const filePath = folderPath + 'orders.xlsx';

export async function createStyledExcel(couponCode, orders) {
  if (!fs.existsSync(folderPath)) {
    fs.mkdirSync(folderPath);
    console.log(`üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${folderPath}`);
  } else {
    console.log(`‚ö† –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${folderPath}`);
  }

  const filePath = folderPath + `\\${couponCode}.xlsx`;
  let workbook;
  // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
  if (fs.existsSync(filePath)) {
    workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(filePath);
  } else {
    // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    workbook = new ExcelJS.Workbook();
    workbook.addWorksheet('Orders');
  }

  const worksheet = workbook.getWorksheet('Orders') || workbook.addWorksheet('Orders');

  // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  if (worksheet.rowCount === 0) {
    let headerRow;
    if (couponCode === 'face10') {
      headerRow = worksheet.addRow([
        '‚Ññ',
        '‚Ññ –∑–∞–∫–∞–∑–∞',
        '–î–∞—Ç–∞',
        '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞',
        '–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã 15%',
        '–°—Ç–∞—Ç—É—Å',
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        '–°—É–º–º–∞',
      ]);
    } else {
      headerRow = worksheet.addRow([
        '‚Ññ',
        '‚Ññ –∑–∞–∫–∞–∑–∞',
        '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞',
        '–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã 15%',
        '–°—Ç–∞—Ç—É—Å',
        '–°—É–º–º–∞',
      ]);
    }

    // –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    headerRow.eachCell((cell) => {
      cell.font = { bold: true, color: { argb: 'FFFFFFFF' } }; // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '4F81BD' } }; // –°–∏–Ω–∏–π —Ñ–æ–Ω
      cell.alignment = { horizontal: 'center' };
    });
  }

  // // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  // if (worksheet.rowCount === 0) {
  //   const headerRow = worksheet.addRow([
  //     'Order ID',
  //     'Order Number',
  //     'Order Date',
  //     'Total Amount',
  //     'Amount With Coupon',
  //     'Product Name',
  //     'Quantity',
  //   ]);

  //   // –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  //   headerRow.eachCell((cell) => {
  //     cell.font = { bold: true, color: { argb: 'FFFFFFFF' } }; // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
  //     cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '4F81BD' } }; // –°–∏–Ω–∏–π —Ñ–æ–Ω
  //     cell.alignment = { horizontal: 'center' };
  //   });
  // }

  let rowIndex = worksheet.rowCount + 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å–≤–æ–±–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

  orders.some((order, ind) => {
    const startRow = rowIndex;
    if (couponCode === 'face10') {
      order.products.forEach((product, index) => {
        worksheet.addRow([
          index === 0 ? ind : null,
          index === 0 ? order.orderId : null,
          index === 0 ? order.orderDate : null,
          index === 0 ? order.amountWithCoupon : null,
          index === 0 ? order.amountPayment : null,
          index === 0 ? order.orderStatus.text : null,
          product.name,
          product.quantity,
          ind === 0 ? orders['amountEntire'] : null,
        ]);
        rowIndex++;
      });
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      ['A', 'B', 'C', 'D', 'E', 'F', 'I'].forEach((col) => {
        worksheet.mergeCells(`${col}${startRow}:${col}${rowIndex - 1}`);
        worksheet.getCell(`${col}${startRow}`).alignment = {
          vertical: 'middle',
          horizontal: 'center',
        };
      });
    } else {
      worksheet.addRow([
        ind,
        order.orderId,
        order.amountWithCoupon,
        order.amountPayment,
        order.orderStatus.text,
        ind === 0 ? orders['amountEntire'] : null,
      ]);
      rowIndex++;
      ['A', 'B', 'C', 'D', 'E', 'F'].forEach((col) => {
        worksheet.getCell(`${col}${startRow}`).alignment = {
          vertical: 'middle',
          horizontal: 'center',
        };
      });
    }

    // }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ –∞–≤—Ç–æ—à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    worksheet.eachRow((row) => {
      row.eachCell((cell) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' },
        };
      });
    });

    worksheet.columns.forEach((column) => {
      let maxLength = 0;
      column.eachCell({ includeEmpty: true }, (cell) => {
        const cellValue = cell.value ? cell.value.toString().length : 10;
        if (cellValue > maxLength) {
          maxLength = cellValue;
        }
      });
      column.width = maxLength + 2;
    });
    if (ind >= orders.length - 2) return true;
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  await workbook.xlsx.writeFile(filePath);
  console.log(`–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ ${filePath}!`);
}
